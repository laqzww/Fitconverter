version: "3.9"

services:
  db:
    image: postgis/postgis:16-3.4
    environment:
      POSTGRES_DB: gis
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./app/backend/sql:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d gis"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7
    command: ["redis-server", "--appendonly", "no", "--maxmemory-policy", "allkeys-lru"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./app/backend
    env_file: .env.example
    environment:
      GPX_OUTPUT_DIR: /app/out
    volumes:
      - ./app/backend/out:/app/out
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]

  worker:
    build:
      context: ./app/backend
    env_file: .env.example
    environment:
      GPX_OUTPUT_DIR: /app/out
    volumes:
      - ./app/backend/out:/app/out
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: ["python", "worker.py"]

  frontend:
    build:
      context: ./app/frontend
    env_file: .env.example
    depends_on:
      api:
        condition: service_started
    ports:
      - "5173:5173"
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0", "--port", "5173"]

volumes:
  pgdata:
